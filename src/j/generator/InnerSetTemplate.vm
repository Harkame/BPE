#set( $equals_p = '.equals(p_element)' )
package j.implementation.microSet;

public class $innerSetClassName <T> implements InnerSet<T>
{
    #foreach($element in $elements)
protected T $element;
    #end
    
    public $innerSetClassName(#foreach($element in $elements)T p_element_$foreach.count#if( $foreach.hasNext ), #end#end)
    {
        #foreach($element in $elements)
$element = p_element_$foreach.count;
        #end
    }
    
    @Override
    public InnerSet<T> addElement(T p_element)
    {
        if(#foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end)
            return this;
        else
            return new $nextInnerSet(#foreach($element in $elements)$element#if( $foreach.hasNext ), #end#end , p_element);
    }

    @Override
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public InnerSet<T> removeElement(Object p_element)
    {
        #foreach($el in $elements)
        #set( $count = $foreach.count )
if($el$equals_p)
            return new $previousInnerSet(#foreach($element in $elements)#if($count != $foreach.count)$element#end#end);
        #end
else
            return this;
    }

    @Override
    public boolean containsElement(Object p_element)
    {
        return #foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end;
    }

    @Override
    public String toString()
    {
        return "{" + #foreach($element in $elements)$element#if( $foreach.hasNext ) + ", " + #end#end + " }";
    }
    
    @Override
    public int getSize()
    {
        return $innerSetOffset;
    }

}
