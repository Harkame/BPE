#set( $equals_p = '.equals(p_element)' )
package j.implementation.microSet;

import java.util.Iterator;

public class $innerSetClassName <T> extends AbstractInnerSet<T>
{
    #foreach($element in $elements)
    protected T $element;
    #end
    
    public $innerSetClassName(#foreach($element in $elements)T p_element_$foreach.count#if( $foreach.hasNext ), #end#end)
    {
        #foreach($element in $elements)
        $element = p_element_$foreach.count;
        #end
    }

    public $innerSetClassName($innerSetClassName<T> i)
    {
    #foreach($element in $elements)
        $element = i.element_$foreach.count;
    #end
    }

    public $innerSetClassName<T> copy() {
        return new $innerSetClassName(this);
    }

    public $innerSetClassName($previousInnerSet<T> i, T el)
    {
    #foreach($element in $elements)
        #if( $foreach.hasNext )$element = i.element_$foreach.count;#end
    #end
    element_$innerSetOffset = el;
    }
    
    @Override
    public InnerSet<T> addElement(T p_element)
    {
        if(#foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end)
            return this;
        else
            return new #if($innerSetOffset == $lastInnerSet)InnerArraySet<T>(this, p_element);#else$nextInnerSet<>(this, p_element);#end
    }

    @Override
    public InnerSet<T> addUnChecked(T p_element)
    {
        return new #if($innerSetOffset == $lastInnerSet)InnerArraySet<T>(this, p_element);#else$nextInnerSet<>(this, p_element);#end
    }

    @Override
    public InnerSet<T> removeElement(Object p_element)
    {
        #foreach($el in $elements)
        #set( $f = $foreach )
        #set($sep = "")
        if($el$equals_p)
            return #if($innerSetOffset == 1) (InnerSet_0<T>) InnerSet_0.singleton
            #else new $previousInnerSet<>(#foreach($element in $elements)#if($f.count != $foreach.count)$sep$element#set($sep = ", ")#end#end)#end;
        #if( $f.hasNext ) else #end
        #end
        else
            return this;
    }

    @Override
    public boolean containsElement(Object p_element)
    {
        return #foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end;
    }


    public T getElement(int index)
    {switch(index) {
        #foreach($element in $elements)
        case $foreach.count:
            return $element;
        #end
        default:
            return null;
            }
    }


    public InnerSet<T> addAllElements(InnerSet<T> innerSet) {
        return innerSet#foreach($element in $elements).addElement($element)#end;
    }


    @Override
    public InnerSet<T> removeAllElements(InnerSet<T> innerSet) {
        return innerSet#foreach($element in $elements).removeElement($element)#end;
    }

    @Override
    public InnerSet<T> retainAllElements(InnerSet<T> innerSet) {
        InnerSet<T> i = this;
        #foreach($element in $elements)
        if (!innerSet.containsElement($element)) i = i.removeElement($element);
        #end
        return i;
    }

    @Override
    public boolean containsAllElements(InnerSet<T> innerSet) {
        return #foreach($element in $elements) innerSet.containsElement($element)#if( $foreach.hasNext) &&#end#end;
    }

    public InnerSet<T> addAllAndPropagate(InnerSet<T> innerSet, MicroSet<T> microSetToPropagate) {
        return innerSet#foreach($element in $elements).addAndPropagate($element, microSetToPropagate)#end;
    }

    public InnerSet<T> addAndPropagate(T p_element, MicroSet<T> microSetToPropagate) {
        if(#foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end)
            return this;
        else {
            microSetToPropagate.add(p_element);
            return new #if($innerSetOffset == $lastInnerSet)InnerArraySet<T>(this, p_element);#else$nextInnerSet<>(this, p_element);#end
        }
    }

    @Override
    public String toString()
    {
        return "{" + #foreach($element in $elements)$element#if( $foreach.hasNext ) + ", " + #end#end + " }";
    }
    
    @Override
    public int getSize()
    {
        return $innerSetOffset;
    }

    @Override
    public Iterator<T> iterator() {
        return new InnerSetIterator<>(this);
    }

    @Override
    public InnerSet<T> clear(boolean unused) {
        return (InnerSet<T>) InnerSet_0.singleton;
    }
}
