#[[#include]]# "$InnerSetPreviousInclude"
#[[#include]]# "$InnerSetInclude"
#[[#include]]# "$InnerSetNextInclude"
#[[#include]]# "$InnerSetArraynclude"

template<typename T, int p_to_up>
$innerSetClassName<T, p_to_up>::$innerSetClassName()
{

}

template<typename T, int p_to_up>
$innerSetClassName<T, p_to_up>::$innerSetClassName(#foreach($element in $elements)T p_element_$foreach.count#if( $foreach.hasNext ), #end#end)
{
    #foreach($element in $elements)
        a_values.$element = p_element_$foreach.count;
    #end
}

template<typename T, int p_to_up>
$innerSetClassName<T, p_to_up>::$innerSetClassName($previousInnerSet<T, p_to_up>* p_inner_set, T p_element)
{
    #foreach($element in $elements)
        #if( $foreach.hasNext )a_values.$element = p_inner_set->a_values.element_$foreach.count;#end
    #end
    a_values.element_$innerSetOffset = p_element;
    
	delete p_inner_set;
}

template<typename T, int p_to_up>
$innerSetClassName<T, p_to_up>::~$innerSetClassName()
{

}

template<typename T, int p_to_up>
inner_set<T, p_to_up>*  $innerSetClassName<T, p_to_up>::copy()
{
	return this;
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::add_element(T p_element)
{
	if(!contains_element(p_element))
		if(this->a_to_up == $innerSetOffset)
			return new inner_array_set<T, p_to_up>(this, p_element);
		else
			return new $nextInnerSet<T, p_to_up>(this, p_element);
	else
		return this;
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::add_all_elements(inner_set<T, p_to_up>* p_inner_set)
{
  return p_inner_set->#foreach($element in $elements)add_element(a_values.element_$foreach.count)#if( $foreach.hasNext )->#end#end;
}

template<typename T, int p_to_up>
bool $innerSetClassName<T, p_to_up>::contains_element(T p_element)
{
    return #foreach($element in $elements) a_values.$element == p_element#if( $foreach.hasNext) || #end#end;
}

template<typename T, int p_to_up>
bool $innerSetClassName<T, p_to_up>::contains_all_elements(inner_set<T, p_to_up>* p_inner_set)
{
   return #foreach($element in $elements) p_inner_set->contains_element(a_values.element_$foreach.count) #if( $foreach.hasNext) &&  #end#end;
}

template<typename T, int p_to_up>
T $innerSetClassName<T, p_to_up>::get_element(int p_index)
{
    return reinterpret_cast<T*>(&a_values)[p_index];
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::remove_element(T p_element)
{
        #foreach($el in $elements)
        #set( $f = $foreach )
        #set($sep = "")
        if(a_values.$el == p_element)
        #if($innerSetOffset == 1) 
        return inner_set_0<T, p_to_up>::EMPTY;
        #else
        {
        	delete this;
        	return new $previousInnerSet<T, p_to_up>(#foreach($element in $elements)#if($f.count != $foreach.count)$sep a_values.$element#set($sep = ", ")#end#end)#end;
    	}
        #if( $f.hasNext ) else #end
        #end
        else
            return this;
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::remove_all_elements(inner_set<T, p_to_up>* p_inner_set)
{
  return p_inner_set->#foreach($element in $elements)remove_element(a_values.element_$foreach.count)#if( $foreach.hasNext )->#end#end;
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::retain_all_elements(inner_set<T, p_to_up>* p_inner_set)
{
  inner_set<T, p_to_up>* r_inner_set = inner_set_0<T, p_to_up>::EMPTY;

	#foreach($el in $elements)
	if(p_inner_set->contains_element(a_values.element_$foreach.count))
		 r_inner_set = r_inner_set->add_element(a_values.element_$foreach.count);
	
	 #end

    if(this->get_size() != 0)
      delete this;

  return r_inner_set;
}


template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::add_and_propagate(T p_element, micro_set<T, p_to_up>* p_micro_set)
{
	if(#foreach($element in $elements) a_values.element_$foreach.count == p_element #if( $foreach.hasNext) ||  #end#end)
		return this;
	else
  	{
  		p_micro_set->insert(p_element);

		return new $nextInnerSet<T, p_to_up>(this, p_element);
	}
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::add_all_and_propagate(inner_set<T, p_to_up>* p_inner_set, micro_set<T, p_to_up>* p_micro_set)
{
  return p_inner_set->add_all_and_propagate_reverse(this, p_micro_set);
}

template<typename T, int p_to_up>
inner_set<T, p_to_up>* $innerSetClassName<T, p_to_up>::add_all_and_propagate_reverse(inner_set<T, p_to_up>* p_inner_set, micro_set<T, p_to_up>* p_micro_set)
{
	return p_inner_set->#foreach($element in $elements)add_and_propagate(a_values.element_$foreach.count, p_micro_set)#if( $foreach.hasNext )->#end#end;
}

template<typename T, int p_to_up>
int $innerSetClassName<T, p_to_up>::get_size()
{
    return $innerSetOffset;
}
