#ifndef $innerSetClassName_H
#[[#define $innerSetClassName_H]]#


#[[#include]]# "inner_set.hpp"
#[[#include]]# "$previousInnerSet.cpp"
#[[#include]]# "$nextInnerSet.cpp"

using namespace std;

template<typename T>
class $innerSetClassName : public inner_set<T>
{
    private :
        T** a_values;

    public :
        $innerSetClassName<T>();

        $innerSetClassName<T>(T*);

        virtual ~$innerSetClassName<T>();

        virtual inner_set<T>* add_element(T*);

        virtual inner_set<T>* add_elements(T**);

        virtual bool contains_element(T*);

        virtual bool contains_all_elements(T*);

        virtual T* get_element(int);

        virtual inner_set<T>* remove_element(T*);

        virtual inner_set<T>* retain_all_element(T**);

        virtual  int get_size();
};

#endif


#[[#include]]# "$innerSetClassName.hpp"

#[[#include <iostream>]]#

template<typename T>
$innerSetClassName<T>::$innerSetClassName() : inner_set<T>()
{
	a_values = new T*[1];
}

template<typename T>
$innerSetClassName<T>::$innerSetClassName(T* p_element)
{
	a_values = new T*[1];
	a_values[0] = p_element;
}

template<typename T>
$innerSetClassName<T>::~$innerSetClassName()
{

}

template<typename T>
inner_set<T>* $innerSetClassName<T>::add_element(T* p_element)
{
    return new inner_set_2<T>(a_values[0], p_element);
}

template<typename T>
inner_set<T>* $innerSetClassName<T>::add_elements(T** p_elements)
{
    return nullptr; //TODO
}

template<typename T>
bool $innerSetClassName<T>::contains_element(T* p_element)
{
    return a_values[0] == p_element;
}

template<typename T>
bool $innerSetClassName<T>::contains_all_elements(T* p_elements)
{
    return false; //TODO
}

template<typename T>
T* $innerSetClassName<T>::get_element(int p_index)
{
    return a_values[p_index];
}

template<typename T>
inner_set<T>* $innerSetClassName<T>::remove_element(T* p_element)
{
    if(a_values[0] == p_element)
    	return #if($innerSetOffset == 1)InnerSet_0<T>::SINGLETON #else
                                                                    #end;
    else
    	return this;
}

template<typename T>
inner_set<T>* $innerSetClassName<T>::retain_all_element(T** p_elements)
{
    return this; //TODO
}

template<typename T>
int $innerSetClassName<T>::get_size()
{
    return 1;
}
