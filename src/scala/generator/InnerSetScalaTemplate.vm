#set( $equals_p = '.equals(p_element)')
#set( $t = '[T]')
#set( $instanceOf = ".asInstanceOf[Object]")
package scala.implementation

object $innerSetClassName
{
    def apply[T](#foreach($element in $elements)$element: T#if( $foreach.hasNext ), #end#end): $innerSetClassName$t = new $innerSetClassName$t(#foreach($element in $elements)element$foreach.count#if( $foreach.hasNext ), #end#end)
}

class $innerSetClassName$t(#foreach($element in $elements)$element: T#if( $foreach.hasNext ), #end#end) extends AbstractInnerSet[T]
{

    override def addElement(p_element: T): InnerSet[T] =
    {
        if (#foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end)
        {
            this
        }
        else #if($innerSetOffset == $lastInnerSet)InnerHashSet(this)#else $nextInnerSet(#foreach($element in $elements)$element#if( $foreach.hasNext ), #end#end, p_element)#end

    }

    override def addUnchecked(p_element: T): InnerSet[T] = #if($innerSetOffset == $lastInnerSet)InnerHashSet(this)#else $nextInnerSet(#foreach($element in $elements)$element#if( $foreach.hasNext ), #end#end, p_element)#end


    override def addAllElements(p_innerSet: InnerSet[T]): InnerSet[T] = #if($innerSetOffset  == 1) p_innerSet.addElement(element1)#else p_innerSet#foreach($element in $elements).addElement($element)#end#end


    override def containsElement(p_element: Object): Boolean = #foreach($element in $elements)$element$equals_p#if( $foreach.hasNext ) || #end#end


    override def containsAllElements(p_innerSet: InnerSet[T]): Boolean = #foreach($element in $elements) p_innerSet.containsElement($element$instanceOf)#if( $foreach.hasNext) &&#end#end


    override def getElement(p_index: Int): Option[T] = p_index match{
    #foreach($element in $elements)
    case $foreach.count => Option($element)
    #end
    case _ => None
    }


    override def removeElement(p_element: Object): InnerSet[T] =
    {
    #foreach($el in $elements)
        #set( $f = $foreach )
        #set($sep = "")
        if($el$equals_p)
        #if($innerSetOffset == 1) new InnerSet_0
        #else $previousInnerSet(#foreach($element in $elements)#if($f.count != $foreach.count)$sep$element#set($sep = ", ")#end#end)
        #end
        #if( $f.hasNext )  else #end
    #end
    else this
    }

    override def removeAllElements(p_innerSet: InnerSet[T]): InnerSet[T] = #if($innerSetOffset  == 1) p_innerSet.removeElement(element1$instanceOf)#else p_innerSet#foreach($element in $elements).removeElement($element$instanceOf)#end#end


    override def retainAllElements(p_innerSet: InnerSet[T]): InnerSet[T] =
    {
      var i: InnerSet[T] = this
      #foreach($element in $elements)
      if(!p_innerSet.containsElement($element$instanceOf)) i = i.removeElement($element$instanceOf)
      #end
      i
    }

    override def getSize: Int = $innerSetOffset

    override def iterator: InnerSetIterator[T] = InnerSetIterator(this)

    override def copy: Option[InnerSet[T]] = Option($innerSetClassName(#foreach($element in $elements)$element: T#if( $foreach.hasNext ), #end#end))

    override def clear(unused: Boolean): InnerSet[T] = InnerSet_0[T]

    override def toString : String = "{ " + #foreach($element in $elements)$element#if( $foreach.hasNext ) + ", " + #end#end + " }"
}